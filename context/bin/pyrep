#!/usr/bin/python3

import argparse, urllib.request, urllib.parse, json, logging, sys, os, time

opts = {}

def start():
	global opts
	parser = argparse.ArgumentParser()
	parser.add_argument("-t", "--app_token", help="Boxchief Application Token")
	parser.add_argument("-i", "--interval", help="Update interval", default=60)
	parser.add_argument("-v", "--verbose", help="Verbose", action="store_true", default=False)
	parser.add_argument("-l", "--log", help="Log path", default="/var/log/pyrep.log")

	args = parser.parse_args()

	opts['app_token'] = args.app_token
	opts['interval'] = args.interval
	opts['verbose'] = args.verbose
	opts['log'] = args.log
	opts['name'] = os.environ.get('CNTR_NAME')
	opts['type'] = os.environ.get('CNTR_TYPE')

	logging.basicConfig(filename=opts['log'], level=logging.DEBUG)

	if not (opts['app_token']):
		info("Must give app token. Exiting.", stdout=True)
		sys.exit()

	info("Starting...")
	while(True):
		report_up()
		time.sleep(opts['interval'])

def report_up():
	url = "http://boxchief.com/api/stats/report"
	rd = {}
	rd['container'] = opts['name']
	rd['container_type'] = opts['type']
	rd['app_token'] = opts['app_token']
	rd['data'] = json.dumps({'up': 1})
	request_url(url, "POST", rd)


def request_url(url, method, data):
	try:
		params = urllib.parse.urlencode(data)
		#params = urllib.parse.urlencode({'value': 'test'})
		debug("Sending request to {} with data {}.".format(url, params))
		req = urllib.request.Request(url=url, data=params.encode('utf-8'))
		req.get_method = lambda: method
		opener = urllib.request.build_opener(SmartRedirectHandler)
		resp = opener.open(req)
		resp_data = resp.read().decode('utf-8')
	except ValueError:
		info("An error occurred fetching the URL.")
		return None
	return resp_data

def info(str, stdout=False):
	logging.info(str)
	if stdout:
		sys.stdout.write("{}\n".format(str))
def debug(str):
	if opts['verbose']:
		logging.debug(str)

class SmartRedirectHandler(urllib.request.HTTPRedirectHandler):
	def http_error_307(self, req, fp, code, msg, headers):
		req.full_url = headers['Location']
		resp = urllib.request.urlopen(req)
		return resp

start()
